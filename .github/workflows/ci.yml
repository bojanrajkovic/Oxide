name: Build and Release
on:
  - push
jobs:
  build_and_pack:
    name: Build and Package
    runs-on: ubuntu-latest
    steps:
    - name: Check Out Source
      uses: actions/checkout@v1
    - name: Prepare Repository
      run: |
        git checkout master
        git checkout "${GITHUB_REF:11}"
    - name: Set Up .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.201
    - name: Install Tools
      run: |
        dotnet tool restore
    - name: Generate Version Number
      run: |
        dotnet tool run dotnet-gitversion /updateAssemblyInfo /output json | tee -a version.json
        echo "::set-env name=PackageVersion::$(cat version.json | jq -r .NuGetVersionV2)"
    - name: Run Build
      run: |
        dotnet build -c Release -p:Deterministic=true -p:ContinuousIntegrationBuild=true
    - name: Run Tests
      run: |
        dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=OpenCover -p:Exclude="+[Oxide*]*%2c-[Oxide.Tests]*"
    - name: Upload Coverage
      run: |
        dotnet tool run codecov -f "src/Oxide.Tests/coverage.opencover.xml" -t ${{ secrets.CODECOV_TOKEN }}
    - name: Pack NuGet (No Release Notes)
      run: |
        sed -i '/<PackageReleaseNotes>/d' src/**/*.csproj
        dotnet pack --include-symbols --no-build -c Release -o ./artifacts -p:SymbolPackageFormat=snupkg -p:Version=$PackageVersion -v minimal
      if: "!startsWith(github.ref, 'refs/tags/')"
    - name: Pack NuGet (Release Notes)
      run: |
        curl -o release.json -L https://api.github.com/repos/${{ github.repository }}/releases/tags/${GITHUB_REF##*/}
        dotnet msbuild /t:UpdateReleaseNotes src/Oxide/Oxide.csproj
        dotnet msbuild /t:UpdateReleaseNotes src/Oxide.Http/Oxide.Http.csproj
        dotnet pack --include-symbols --no-build -c Release -o ./artifacts -p:SymbolPackageFormat=snupkg -p:Version=$PackageVersion -v minimal
      if: startsWith(github.ref, 'refs/tags/')
    - name: Upload Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: NuGet Packages
        path: artifacts
  push_to_nuget:
    name: Push to NuGet
    runs-on: ubuntu-latest
    needs: build_and_pack
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v1
      with:
        name: NuGet Packages
    - name: Set up .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.201
    - name: Push To NuGet
      run: >
        dotnet
        nuget
        push
        --api-key ${{ secrets.NUGET_API_KEY }}
        --source https://api.nuget.org/v3/index.json
        ./NuGet\ Packages/*.nupkg
  push_to_gh:
    name: Push To GitHub Packages
    runs-on: ubuntu-latest
    needs: build_and_pack
    if: "!startsWith(github.ref, 'refs/tags/')"
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v1
      with:
        name: NuGet Packages
    - name: Set Up .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.201
    - name: Install Tools
      run: |
        dotnet new tool-manifest
        dotnet tool install gpr
    - name: Push All Builds To CI Feed
      run: |
        find . -name '*.nupkg' -exec dotnet tool run gpr push -k ${{ secrets.GITHUB_TOKEN }} {} \;
