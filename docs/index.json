{
  "api/Oxide.ObjectExtensions.html": {
    "href": "api/Oxide.ObjectExtensions.html",
    "title": "Class ObjectExtensions | Oxide Documentation",
    "keywords": "Class ObjectExtensions Generic object extensions. Inheritance Object ObjectExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public static class ObjectExtensions Methods | Improve this Doc View Source Also<TReceiver>(TReceiver, Action<TReceiver>) Calls the specified function block with self as its argument, and returns self . Declaration public static TReceiver Also<TReceiver>(this TReceiver self, Action<TReceiver> block) Parameters Type Name Description TReceiver self The object itself. Action <TReceiver> block The function to call. Returns Type Description TReceiver self . Type Parameters Name Description TReceiver The type of the object. Remarks Also can be used to perform actions that take the object as an argument, but can possibly be removed without breaking program logic, such as logging, debug printing, etc.. | Improve this Doc View Source Identity<T>(T) Returns the passed object. Declaration public static T Identity<T>(this T self) Parameters Type Name Description T self The object. Returns Type Description T The object. Type Parameters Name Description T The type of the object. Remarks This method can be useful as part of LINQ compositions, especially involving Where<TSource>(IEnumerable<TSource>, Func<TSource,Boolean>) . | Improve this Doc View Source Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) Calls the specified function block with self as its argument, and returns the result. Declaration public static TResult Let<TReceiver, TResult>(this TReceiver self, Func<TReceiver, TResult> block) Parameters Type Name Description TReceiver self The object itself. Func <TReceiver, TResult> block The function to call. Returns Type Description TResult The result of block with self as the argument. Type Parameters Name Description TReceiver The type of the receiving object, self . TResult The type of the value returned from block . Remarks Let can be used instead of a direct call to avoid temporary variables in scope or clean up operations against possibly-null values. For example, consider maybeNull?.Let(...); vs. if (maybeNull != null) { ... } . | Improve this Doc View Source TakeIf<T>(T, Func<T, Boolean>) Evaluates self against predicate , and returns an optional value depending on whether the predicate returns true or false . Declaration public static Option<T> TakeIf<T>(this T self, Func<T, bool> predicate) Parameters Type Name Description T self The object itself. Func <T, Boolean > predicate The predicate against which to evaluate the object. Returns Type Description Option <T> The object, if it matches the predicate, or None<T> otherwise. Type Parameters Name Description T The type of the object. Remarks The inverse of TakeUnless<T>(T, Func<T, Boolean>) . | Improve this Doc View Source TakeUnless<T>(T, Func<T, Boolean>) Evaluates self against predicate , and returns an optional value depending on whether the predicate returns true or false . Declaration public static Option<T> TakeUnless<T>(this T self, Func<T, bool> predicate) Parameters Type Name Description T self The object itself. Func <T, Boolean > predicate The predicate against which to evaluate the object. Returns Type Description Option <T> None<T> if the object matches the predicate, or the object otherwise. Type Parameters Name Description T The type of the object. Remarks Can be used to start or break option chains depending on some predicate. | Improve this Doc View Source To<TA, TB>(TA, TB) Converts a pair of objects a and b into a tuple containing both. Declaration public static (TA a, TB b) To<TA, TB>(this TA a, TB b) Parameters Type Name Description TA a The first object. TB b The second object. Returns Type Description ValueTuple <TA, TB> A ValueTuple<T1,T2> containing both a and b . Type Parameters Name Description TA The type of a . TB The type of b . | Improve this Doc View Source Use<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) Calls a method, passing an IDisposable self to the function block , and then disposes the object. Declaration public static TResult Use<TReceiver, TResult>(this TReceiver self, Func<TReceiver, TResult> block) where TReceiver : IDisposable Parameters Type Name Description TReceiver self The disposable object. Func <TReceiver, TResult> block The function to execute. Returns Type Description TResult The result of block . Type Parameters Name Description TReceiver The type of the object. TResult The type of the result from block . | Improve this Doc View Source Yield<T>(T) Yields the given object as a single-item IEnumerable<T> . Declaration public static IEnumerable<T> Yield<T>(this T self) Parameters Type Name Description T self The object. Returns Type Description IEnumerable <T> A single-item enumerable containing the object. Type Parameters Name Description T The type of the object."
  },
  "api/Oxide.Result.html": {
    "href": "api/Oxide.Result.html",
    "title": "Class Result | Oxide Documentation",
    "keywords": "Class Result The abstract base class for all Result types. Inheritance Object Result Result<TResult, TError> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public abstract class Result Properties | Improve this Doc View Source IsError Gets whether this Result contains an error. Declaration public bool IsError { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOk Gets whether this Result contains a value. Declaration public bool IsOk { get; } Property Value Type Description Boolean Extension Methods ObjectExtensions.Yield<T>(T) ObjectExtensions.Identity<T>(T) ObjectExtensions.Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) ObjectExtensions.Also<TReceiver>(TReceiver, Action<TReceiver>) ObjectExtensions.To<TA, TB>(TA, TB) ObjectExtensions.TakeUnless<T>(T, Func<T, Boolean>) ObjectExtensions.TakeIf<T>(T, Func<T, Boolean>)"
  },
  "CODE_OF_CONDUCT.html": {
    "href": "CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct | Oxide Documentation",
    "keywords": "Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at brajkovic@coderinserepeat.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4"
  },
  "api/Oxide.Http.html": {
    "href": "api/Oxide.Http.html",
    "title": "Class Http | Oxide Documentation",
    "keywords": "Class Http HttpClient extensions. Inheritance Object Http Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.Http.dll Syntax public static class Http Methods | Improve this Doc View Source SafelyDeleteAsync(HttpClient, String) Safely sends an HTTP DELETE to requestUri . Declaration public static Task<Result<HttpResponseMessage, Exception>> SafelyDeleteAsync(this HttpClient client, string requestUri) Parameters Type Name Description HttpClient client The client. String requestUri The URI to send a GET request to. Returns Type Description Task < Result < HttpResponseMessage , Exception >> An HttpResponseMessage , or a caught exception. Remarks It is up to the caller to process the HTTP response as desired. | Improve this Doc View Source SafelyGetAsync(HttpClient, String) Safely gets an HttpResponseMessage from the given URI. Declaration public static Task<Result<HttpResponseMessage, Exception>> SafelyGetAsync(this HttpClient client, string requestUri) Parameters Type Name Description HttpClient client The client. String requestUri The URI to send a GET request to. Returns Type Description Task < Result < HttpResponseMessage , Exception >> An HttpResponseMessage , or a caught exception. Remarks It is up to the caller to process the HTTP response as desired. | Improve this Doc View Source SafelyGetByteArrayAsync(HttpClient, String) Safely gets bytes from the given URI. Declaration public static Task<Result<byte[], Exception>> SafelyGetByteArrayAsync(this HttpClient client, string requestUri) Parameters Type Name Description HttpClient client The client. String requestUri The URI to send a GET request to. Returns Type Description Task < Result < Byte [], Exception >> A Result<TResult, TError> with the bytes, or a caught exception. | Improve this Doc View Source SafelyGetStreamAsync(HttpClient, String) Safely gets a stream from the given URI. Declaration public static Task<Result<Stream, Exception>> SafelyGetStreamAsync(this HttpClient client, string requestUri) Parameters Type Name Description HttpClient client The client. String requestUri The URI to send a GET request to. Returns Type Description Task < Result < Stream , Exception >> A Result<TResult, TError> with the stream, or a caught exception. | Improve this Doc View Source SafelyGetStringAsync(HttpClient, String) Safely gets a string value from the given URI. Declaration public static Task<Result<string, Exception>> SafelyGetStringAsync(this HttpClient client, string requestUri) Parameters Type Name Description HttpClient client The client. String requestUri The URI to send a GET request to. Returns Type Description Task < Result < String , Exception >> A Result<TResult, TError> with the string value, or a caught exception. | Improve this Doc View Source SafelyPostAsync(HttpClient, String, HttpContent) Safely posts content to requestUri . Declaration public static Task<Result<HttpResponseMessage, Exception>> SafelyPostAsync(this HttpClient client, string requestUri, HttpContent content) Parameters Type Name Description HttpClient client The client. String requestUri The URI to send a GET request to. HttpContent content The content to POST. Returns Type Description Task < Result < HttpResponseMessage , Exception >> An HttpResponseMessage , or a caught exception. Remarks It is up to the caller to process the HTTP response as desired. | Improve this Doc View Source SafelyPutAsync(HttpClient, String, HttpContent) Safely puts content to requestUri . Declaration public static Task<Result<HttpResponseMessage, Exception>> SafelyPutAsync(this HttpClient client, string requestUri, HttpContent content) Parameters Type Name Description HttpClient client The client. String requestUri The URI to send a GET request to. HttpContent content The content to POST. Returns Type Description Task < Result < HttpResponseMessage , Exception >> An HttpResponseMessage , or a caught exception. Remarks It is up to the caller to process the HTTP response as desired."
  },
  "index.html": {
    "href": "index.html",
    "title": "Oxide | Oxide Documentation",
    "keywords": "Oxide Hello, world! This is Oxide."
  },
  "api/Oxide.EnumerableExtension.html": {
    "href": "api/Oxide.EnumerableExtension.html",
    "title": "Class EnumerableExtension | Oxide Documentation",
    "keywords": "Class EnumerableExtension Extensions for IEnumerable<T> . Inheritance Object EnumerableExtension Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public static class EnumerableExtension Methods | Improve this Doc View Source Head<T>(IEnumerable<T>) Returns the head of a collection. Equivalent to First<TSource>(IEnumerable<TSource>) . Declaration public static T Head<T>(this IEnumerable<T> self) Parameters Type Name Description IEnumerable <T> self The collection. Returns Type Description T The first collection element. Type Parameters Name Description T The type of the collection elements. | Improve this Doc View Source Rest<T>(IEnumerable<T>) Returns the rest of the collection. Equivalent to Tail<T>(IEnumerable<T>) . Declaration public static IEnumerable<T> Rest<T>(this IEnumerable<T> self) Parameters Type Name Description IEnumerable <T> self The collection. Returns Type Description IEnumerable <T> Everything but the first collection element. Type Parameters Name Description T The type of the collection elements. | Improve this Doc View Source Tail<T>(IEnumerable<T>) Returns the tail of a collection. Declaration public static IEnumerable<T> Tail<T>(this IEnumerable<T> self) Parameters Type Name Description IEnumerable <T> self The collection. Returns Type Description IEnumerable <T> Everything but the first collection element. Type Parameters Name Description T The type of the collection elements."
  },
  "api/Oxide.Some-1.html": {
    "href": "api/Oxide.Some-1.html",
    "title": "Class Some<T> | Oxide Documentation",
    "keywords": "Class Some<T> An Option<TOption> representing some value. Inheritance Object Option Option <T> Some<T> Implements IEquatable < Option <T>> Inherited Members Option<T>.Equals(Option<T>) Option<T>.Equals(Object) Option<T>.Expect(String) Option<T>.Unwrap() Option<T>.TryUnwrap(T) Option<T>.UnwrapOr(T) Option<T>.UnwrapOr(Func<T>) Option<T>.Map<TResult>(Func<T, TResult>) Option<T>.MapAsync<TResult>(Func<T, Task<TResult>>) Option<T>.MapOr<TResult>(Func<T, TResult>, TResult) Option<T>.MapOr<TResult>(Func<T, TResult>, Func<TResult>) Option<T>.And<TResult>(Option<TResult>) Option<T>.AndThen<TResult>(Func<T, Option<TResult>>) Option<T>.Finally(Action<T>) Option<T>.IfNone(Action) Option<T>.AndThenAsync<TResult>(Func<T, Task<Option<TResult>>>) Option<T>.Or(Option<T>) Option<T>.OrElse(Func<Option<T>>) Option<T>.OrElseAsync(Func<Task<Option<T>>>) Option<T>.GetHashCode() Option.IsNone Option.IsSome Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public sealed class Some<T> : Option<T>, IEquatable<Option<T>> Type Parameters Name Description T The type of the value. Implements System.IEquatable<T> Extension Methods ObjectExtensions.Yield<T>(T) ObjectExtensions.Identity<T>(T) ObjectExtensions.Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) ObjectExtensions.Also<TReceiver>(TReceiver, Action<TReceiver>) ObjectExtensions.To<TA, TB>(TA, TB) ObjectExtensions.TakeUnless<T>(T, Func<T, Boolean>) ObjectExtensions.TakeIf<T>(T, Func<T, Boolean>)"
  },
  "api/Oxide.Environment.html": {
    "href": "api/Oxide.Environment.html",
    "title": "Class Environment | Oxide Documentation",
    "keywords": "Class Environment Environment helpers. Inheritance Object Environment Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public static class Environment Methods | Improve this Doc View Source GetEnvironmentVariable(String) Gets an Option<TOption> for the value of the given environment variable. Declaration public static Option<string> GetEnvironmentVariable(string environmentVariable) Parameters Type Name Description String environmentVariable The environment variable name. Returns Type Description Option < String > Some<T> with the value of the environment variable, if there is a value, None<T> otherwise."
  },
  "api/Oxide.None-1.html": {
    "href": "api/Oxide.None-1.html",
    "title": "Class None<T> | Oxide Documentation",
    "keywords": "Class None<T> An Option<TOption> representing no value. Inheritance Object Option Option <T> None<T> Implements IEquatable < Option <T>> Inherited Members Option<T>.Equals(Option<T>) Option<T>.Equals(Object) Option<T>.Expect(String) Option<T>.Unwrap() Option<T>.TryUnwrap(T) Option<T>.UnwrapOr(T) Option<T>.UnwrapOr(Func<T>) Option<T>.Map<TResult>(Func<T, TResult>) Option<T>.MapAsync<TResult>(Func<T, Task<TResult>>) Option<T>.MapOr<TResult>(Func<T, TResult>, TResult) Option<T>.MapOr<TResult>(Func<T, TResult>, Func<TResult>) Option<T>.And<TResult>(Option<TResult>) Option<T>.AndThen<TResult>(Func<T, Option<TResult>>) Option<T>.Finally(Action<T>) Option<T>.IfNone(Action) Option<T>.AndThenAsync<TResult>(Func<T, Task<Option<TResult>>>) Option<T>.Or(Option<T>) Option<T>.OrElse(Func<Option<T>>) Option<T>.OrElseAsync(Func<Task<Option<T>>>) Option<T>.GetHashCode() Option.IsNone Option.IsSome Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public sealed class None<T> : Option<T>, IEquatable<Option<T>> Type Parameters Name Description T The type of the value. Implements System.IEquatable<T> Extension Methods ObjectExtensions.Yield<T>(T) ObjectExtensions.Identity<T>(T) ObjectExtensions.Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) ObjectExtensions.Also<TReceiver>(TReceiver, Action<TReceiver>) ObjectExtensions.To<TA, TB>(TA, TB) ObjectExtensions.TakeUnless<T>(T, Func<T, Boolean>) ObjectExtensions.TakeIf<T>(T, Func<T, Boolean>)"
  },
  "api/Oxide.Option.html": {
    "href": "api/Oxide.Option.html",
    "title": "Class Option | Oxide Documentation",
    "keywords": "Class Option The abstract base class for all Option types. Inheritance Object Option Option<TOption> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public abstract class Option Properties | Improve this Doc View Source IsNone Gets whether this Option does not contain a value. Declaration public bool IsNone { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSome Gets whether this Option contains a value. Declaration public bool IsSome { get; } Property Value Type Description Boolean Extension Methods ObjectExtensions.Yield<T>(T) ObjectExtensions.Identity<T>(T) ObjectExtensions.Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) ObjectExtensions.Also<TReceiver>(TReceiver, Action<TReceiver>) ObjectExtensions.To<TA, TB>(TA, TB) ObjectExtensions.TakeUnless<T>(T, Func<T, Boolean>) ObjectExtensions.TakeIf<T>(T, Func<T, Boolean>)"
  },
  "api/Oxide.Ok-2.html": {
    "href": "api/Oxide.Ok-2.html",
    "title": "Class Ok<TResult, TError> | Oxide Documentation",
    "keywords": "Class Ok<TResult, TError> A Result<TResult, TError> representing a value. Inheritance Object Result Result <TResult, TError> Ok<TResult, TError> Implements IEquatable < Result <TResult, TError>> Inherited Members Result<TResult, TError>.Equals(Result<TResult, TError>) Result<TResult, TError>.Equals(Object) Result<TResult, TError>.GetHashCode() Result<TResult, TError>.Deconstruct(TResult, TError) Result<TResult, TError>.Ok() Result<TResult, TError>.Err() Result<TResult, TError>.Map<TOutput>(Func<TResult, TOutput>) Result<TResult, TError>.MapAsync<TOutput>(Func<TResult, Task<TOutput>>) Result<TResult, TError>.MapErr<TErrorOutput>(Func<TError, TErrorOutput>) Result<TResult, TError>.MapErrAsync<TErrorOutput>(Func<TError, Task<TErrorOutput>>) Result<TResult, TError>.And<TOutput>(Result<TOutput, TError>) Result<TResult, TError>.AndThen<TOutput>(Func<TResult, Result<TOutput, TError>>) Result<TResult, TError>.IfOk(Action<TResult>) Result<TResult, TError>.IfError(Action<TError>) Result<TResult, TError>.AndThenAsync<TOutput>(Func<TResult, Task<Result<TOutput, TError>>>) Result<TResult, TError>.Or<TErrorOutput>(Result<TResult, TErrorOutput>) Result<TResult, TError>.OrElse<TErrorOutput>(Func<TError, Result<TResult, TErrorOutput>>) Result<TResult, TError>.OrElseAsync<TErrorOutput>(Func<TError, Task<Result<TResult, TErrorOutput>>>) Result<TResult, TError>.UnwrapOr(TResult) Result<TResult, TError>.UnwrapOrElse(Func<TError, TResult>) Result<TResult, TError>.UnwrapOrElseAsync(Func<TError, Task<TResult>>) Result<TResult, TError>.Unwrap() Result<TResult, TError>.TryUnwrap(TResult) Result<TResult, TError>.TryUnwrap(TResult, TError) Result<TResult, TError>.Expect(String) Result<TResult, TError>.UnwrapError() Result<TResult, TError>.TryUnwrapError(TError) Result<TResult, TError>.ExpectError(String) Result.IsOk Result.IsError Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public sealed class Ok<TResult, TError> : Result<TResult, TError>, IEquatable<Result<TResult, TError>> Type Parameters Name Description TResult TError Implements System.IEquatable<T> Extension Methods ObjectExtensions.Yield<T>(T) ObjectExtensions.Identity<T>(T) ObjectExtensions.Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) ObjectExtensions.Also<TReceiver>(TReceiver, Action<TReceiver>) ObjectExtensions.To<TA, TB>(TA, TB) ObjectExtensions.TakeUnless<T>(T, Func<T, Boolean>) ObjectExtensions.TakeIf<T>(T, Func<T, Boolean>)"
  },
  "api/Oxide.ParseExtensions.html": {
    "href": "api/Oxide.ParseExtensions.html",
    "title": "Class ParseExtensions | Oxide Documentation",
    "keywords": "Class ParseExtensions A set of extensions for parsing strings into values. Inheritance Object ParseExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public static class ParseExtensions Methods | Improve this Doc View Source Parse<T>(String, Object[]) Converts the string representation of T to its T equivalent. Declaration public static Result<T, Exception> Parse<T>(this string str, params object[] additionalParameters) Parameters Type Name Description String str A string containing a T to convert. Object [] additionalParameters Additional parameters to pass to the TryParse function. Returns Type Description Result <T, Exception > A Result<TResult, TError> containing the result of calling a found TryParse method, or an error if one could not be found, or if one was found and calling it failed. Type Parameters Name Description T The type of the object to parse. | Improve this Doc View Source TryParse<T>(String, Object[]) Converts the string representation of T to its T equivalent, discarding any errors that occur. Declaration public static Result<Option<T>, Exception> TryParse<T>(this string str, params object[] additionalParameters) Parameters Type Name Description String str A string containing a T to convert. Object [] additionalParameters Additional parameters to pass to the TryParse function. Returns Type Description Result < Option <T>, Exception > An Option<TOption> wrapping the result of the conversion, which is a Some<T> if conversion was successful, or None<T> if it failed. Type Parameters Name Description T The type of the object to parse."
  },
  "api/Oxide.Error-2.html": {
    "href": "api/Oxide.Error-2.html",
    "title": "Class Error<TResult, TError> | Oxide Documentation",
    "keywords": "Class Error<TResult, TError> A Result<TResult, TError> representing an error. Inheritance Object Result Result <TResult, TError> Error<TResult, TError> Implements IEquatable < Result <TResult, TError>> Inherited Members Result<TResult, TError>.Equals(Result<TResult, TError>) Result<TResult, TError>.Equals(Object) Result<TResult, TError>.GetHashCode() Result<TResult, TError>.Deconstruct(TResult, TError) Result<TResult, TError>.Ok() Result<TResult, TError>.Err() Result<TResult, TError>.Map<TOutput>(Func<TResult, TOutput>) Result<TResult, TError>.MapAsync<TOutput>(Func<TResult, Task<TOutput>>) Result<TResult, TError>.MapErr<TErrorOutput>(Func<TError, TErrorOutput>) Result<TResult, TError>.MapErrAsync<TErrorOutput>(Func<TError, Task<TErrorOutput>>) Result<TResult, TError>.And<TOutput>(Result<TOutput, TError>) Result<TResult, TError>.AndThen<TOutput>(Func<TResult, Result<TOutput, TError>>) Result<TResult, TError>.IfOk(Action<TResult>) Result<TResult, TError>.IfError(Action<TError>) Result<TResult, TError>.AndThenAsync<TOutput>(Func<TResult, Task<Result<TOutput, TError>>>) Result<TResult, TError>.Or<TErrorOutput>(Result<TResult, TErrorOutput>) Result<TResult, TError>.OrElse<TErrorOutput>(Func<TError, Result<TResult, TErrorOutput>>) Result<TResult, TError>.OrElseAsync<TErrorOutput>(Func<TError, Task<Result<TResult, TErrorOutput>>>) Result<TResult, TError>.UnwrapOr(TResult) Result<TResult, TError>.UnwrapOrElse(Func<TError, TResult>) Result<TResult, TError>.UnwrapOrElseAsync(Func<TError, Task<TResult>>) Result<TResult, TError>.Unwrap() Result<TResult, TError>.TryUnwrap(TResult) Result<TResult, TError>.TryUnwrap(TResult, TError) Result<TResult, TError>.Expect(String) Result<TResult, TError>.UnwrapError() Result<TResult, TError>.TryUnwrapError(TError) Result<TResult, TError>.ExpectError(String) Result.IsOk Result.IsError Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public sealed class Error<TResult, TError> : Result<TResult, TError>, IEquatable<Result<TResult, TError>> Type Parameters Name Description TResult TError Implements System.IEquatable<T> Extension Methods ObjectExtensions.Yield<T>(T) ObjectExtensions.Identity<T>(T) ObjectExtensions.Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) ObjectExtensions.Also<TReceiver>(TReceiver, Action<TReceiver>) ObjectExtensions.To<TA, TB>(TA, TB) ObjectExtensions.TakeUnless<T>(T, Func<T, Boolean>) ObjectExtensions.TakeIf<T>(T, Func<T, Boolean>)"
  },
  "api/Oxide.html": {
    "href": "api/Oxide.html",
    "title": "Namespace Oxide | Oxide Documentation",
    "keywords": "Namespace Oxide Classes EnumerableExtension Extensions for IEnumerable<T> . Environment Environment helpers. Error<TResult, TError> A Result<TResult, TError> representing an error. Http HttpClient extensions. None<T> An Option<TOption> representing no value. ObjectExtensions Generic object extensions. Ok<TResult, TError> A Result<TResult, TError> representing a value. Option The abstract base class for all Option types. Option<TOption> The Option<TOption> type represents an optional value. Every option is either a Some<T> , and has a value, or is a None<T> that has no value. Options Contains helper methods and extension methods for working with Option<TOption> . ParseExtensions A set of extensions for parsing strings into values. Result The abstract base class for all Result types. Result<TResult, TError> The Result<TResult, TError> represents an operation that could return either a result or an error. Every option is either an Ok<TResult, TError> , and has a value and no error, or is a Error<TResult, TError> and has no value and an error. Results Helper methods and extension methods for working with Result<TResult, TError> . Some<T> An Option<TOption> representing some value."
  },
  "api/Oxide.Options.html": {
    "href": "api/Oxide.Options.html",
    "title": "Class Options | Oxide Documentation",
    "keywords": "Class Options Contains helper methods and extension methods for working with Option<TOption> . Inheritance Object Options Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public static class Options Methods | Improve this Doc View Source AndThenAsync<TIn, TOut>(Task<Option<TIn>>, Func<TIn, Option<TOut>>) Awaits the Task<TResult> in self , and chains the resulting Option<TOption> with continuation by calling AndThen<TResult>(Func<TOption, Option<TResult>>) . Declaration public static Task<Option<TOut>> AndThenAsync<TIn, TOut>(this Task<Option<TIn>> self, Func<TIn, Option<TOut>> continuation) Parameters Type Name Description Task < Option <TIn>> self The task to continue. Func <TIn, Option <TOut>> continuation The function to call on the wrapped value. Returns Type Description Task < Option <TOut>> A task that represents the asynchronous chaining of two options, which wraps the result of calling continuation with the wrapped value. Type Parameters Name Description TIn The type of the wrapped value. TOut The output type of the continuation. Remarks This is a convenience method to allow chaining async computations in a natural way. Without this, the syntax gymnastics around await can become strenuous. This is less of an issue with AndThen<TResult>(Func<TOption, Option<TResult>>) because it is not async-oriented, but the syntax is still cleaner. Consider: Task<Option<SomeResult>> task = GetSomeResultAsync(...); Option<TransformedResult> finalResult = (await task).AndThen(...); vs. var finalResult = await GetSomeResultAsync(...).AndThenAsync(...); | Improve this Doc View Source AndThenAsync<TIn, TOut>(Task<Option<TIn>>, Func<TIn, Task<Option<TOut>>>) Awaits the Task<TResult> in self , and chains the resulting Option<TOption> with continuation by calling AndThenAsync<TResult>(Func<TOption, Task<Option<TResult>>>) . Declaration public static Task<Option<TOut>> AndThenAsync<TIn, TOut>(this Task<Option<TIn>> self, Func<TIn, Task<Option<TOut>>> continuation) Parameters Type Name Description Task < Option <TIn>> self The task to continue. Func <TIn, Task < Option <TOut>>> continuation The function to call on the wrapped value. Returns Type Description Task < Option <TOut>> A task that represents the asynchronous chaining of two options, which wraps the result of calling continuation with the wrapped value. Type Parameters Name Description TIn The type of the wrapped value. TOut The output type of the continuation. Remarks This is a convenience method to allow chaining async computations in a natural way. Without this, the syntax gymnastics around await can become strenuous. Consider the following: await (await (await GetSomeResultAsync()).AndThenAsync(...)).AndThenAsync(....); // or var first = await GetSomeResultAsync(); var second = await first.AndThenAsync(...); var third = await second.AndThenAsync(...); vs. var someOptionTask = GetSomeResultAsync(...); await someOptionTask.AndThenAsync(...).AndThenAsync(...).AndThenAsync(...); | Improve this Doc View Source None<T>() Creates a new Option<TOption> that is a None<T>() , which does not contain a value. Declaration public static Option<T> None<T>() Returns Type Description Option <T> An option with no value. Type Parameters Name Description T The type of the value possibly contained within the Option<TOption> . | Improve this Doc View Source Some<T>(T) Creates a new Option<TOption> that is a Some<T>(T) , which contains the given value. Declaration public static Option<T> Some<T>(T value) Parameters Type Name Description T value The value that the option contains. Returns Type Description Option <T> A Some<T>(T) that contains the value value . Type Parameters Name Description T The type of the value contained within the Option<TOption> . | Improve this Doc View Source UnwrapAsync<T>(Task<Option<T>>) Awaits and unwraps a Task<TResult> that contains a Option<TOption> . Declaration public static Task<T> UnwrapAsync<T>(this Task<Option<T>> self) Parameters Type Name Description Task < Option <T>> self The task to unwrap. Returns Type Description Task <T> A task that represents the asynchronous unwrapping, which wraps the unwrapped value of the option. Type Parameters Name Description T The type of the value possibly contained within the Option<TOption> . Exceptions Type Condition InvalidOperationException Thrown when the underlying Option<TOption> is a None<T>() ."
  },
  "api/Oxide.Results.html": {
    "href": "api/Oxide.Results.html",
    "title": "Class Results | Oxide Documentation",
    "keywords": "Class Results Helper methods and extension methods for working with Result<TResult, TError> . Inheritance Object Results Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public static class Results Methods | Improve this Doc View Source AndThenAsync<TIn, TOut, TError>(Task<Result<TIn, TError>>, Func<TIn, Result<TOut, TError>>) Awaits the Task<TResult> in self , and chains the resulting Result<TResult, TError> with continuation by calling AndThen<TOutput>(Func<TResult, Result<TOutput, TError>>) . Declaration public static Task<Result<TOut, TError>> AndThenAsync<TIn, TOut, TError>(this Task<Result<TIn, TError>> self, Func<TIn, Result<TOut, TError>> continuation) Parameters Type Name Description Task < Result <TIn, TError>> self The task to continue. Func <TIn, Result <TOut, TError>> continuation The function to call on the wrapped value. Returns Type Description Task < Result <TOut, TError>> A task that represents the asynchronous chaining of two results, which wraps the result of calling continuation with the wrapped value from self . Type Parameters Name Description TIn The type of the wrapped value. TOut The type of the Result<TResult, TError> value returned from the continuation. TError The type of the error. Remarks This is a convenience method that allows chaining async computations in a more natural way. Without this, the syntax gymnastics around await can become strenuous, doubly so if the compiler is not able to infer generic type parameters. This is less of a issue with AndThen<TOutput>(Func<TResult, Result<TOutput, TError>>) because it is not async-oriented, but the syntax is still cleaner. Consider: Task<Result<TResult, TError>> task = GetSomeResultAsync(...); Result<TTransformed, TError> final = (await task).AndThen(...); vs. var final = await GetSomeResultAsync(...).AndThenAsync(...); | Improve this Doc View Source AndThenAsync<TIn, TOut, TError>(Task<Result<TIn, TError>>, Func<TIn, Task<Result<TOut, TError>>>) Awaits the Task<TResult> in self , and chains the resulting Result<TResult, TError> with continuation by calling AndThenAsync<TOutput>(Func<TResult, Task<Result<TOutput, TError>>>) . Declaration public static Task<Result<TOut, TError>> AndThenAsync<TIn, TOut, TError>(this Task<Result<TIn, TError>> self, Func<TIn, Task<Result<TOut, TError>>> continuation) Parameters Type Name Description Task < Result <TIn, TError>> self The task to continue. Func <TIn, Task < Result <TOut, TError>>> continuation The function to call on the wrapped value. Returns Type Description Task < Result <TOut, TError>> A task that represents the asynchronous chaining of two results, which wraps the result of calling continuation with the wrapped value from self . Type Parameters Name Description TIn The type of the wrapped value. TOut The type of the Result<TResult, TError> value returned from the continuation. TError The type of the error Remarks This is a convenience method that allows chaining async computations in a more natural way. Without this, the syntax gymnastics around await can become strenuous, doubly so if the compiler is not able to infer generic type parameters. Consider: await (await (await GetSomeResultAsync(...)).AndThenAsync(...)).AndThenAsync(...); // or var first = await GetSomeResultAsync(...); var second = await first.AndThenAsync(...); var third = await second.AndThenAsync(...); vs. var final = await GetSomeResultAsync(...).AndThenAsync(...).AndThenAsync(...); | Improve this Doc View Source Combine<TResult, TError>(Result<TResult, TError>[]) Combines multiple Result<TResult, TError> into a single value. Declaration public static Result<IEnumerable<TResult>, TError> Combine<TResult, TError>(params Result<TResult, TError>[] results) Parameters Type Name Description Result <TResult, TError>[] results The results to combine. Returns Type Description Result < IEnumerable <TResult>, TError> A combined result with all of the values as the wrapped value, or the first error encountered. Type Parameters Name Description TResult The type of the wrapped value in each result. TError The type of the wrapped error in each result. | Improve this Doc View Source Combine<TResult, TError>(IEnumerable<Result<TResult, TError>>) Declaration public static Result<IEnumerable<TResult>, TError> Combine<TResult, TError>(IEnumerable<Result<TResult, TError>> results) Parameters Type Name Description IEnumerable < Result <TResult, TError>> results Returns Type Description Result < IEnumerable <TResult>, TError> Type Parameters Name Description TResult TError | Improve this Doc View Source Err<TResult, TError>(TError) Creates a new Result<TResult, TError> that is an Error<TResult, TError> , which does not contain a result, but contains an error. Declaration public static Result<TResult, TError> Err<TResult, TError>(TError error) Parameters Type Name Description TError error The error that the result contains. Returns Type Description Result <TResult, TError> A result with an error value and no result value. Type Parameters Name Description TResult The type of the result value. TError The type of the error value. | Improve this Doc View Source Ok<TResult, TError>(TResult) Creates a new Result<TResult, TError> that is an Ok<TResult, TError>(TResult) , which contains a result, but not an error. Declaration public static Result<TResult, TError> Ok<TResult, TError>(TResult value) Parameters Type Name Description TResult value The value that the result contains. Returns Type Description Result <TResult, TError> A result with a result value and no error value. Type Parameters Name Description TResult The type of the result value. TError The type of the error value."
  },
  "api/Oxide.Option-1.html": {
    "href": "api/Oxide.Option-1.html",
    "title": "Class Option<TOption> | Oxide Documentation",
    "keywords": "Class Option<TOption> The Option<TOption> type represents an optional value. Every option is either a Some<T> , and has a value, or is a None<T> that has no value. Inheritance Object Option Option<TOption> None <T> Some <T> Implements IEquatable < Option <TOption>> Inherited Members Option.IsNone Option.IsSome Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public abstract class Option<TOption> : Option, IEquatable<Option<TOption>> Type Parameters Name Description TOption The type of the wrapped value. Remarks Option types can be useful in a number of places: Replace null or other \"no value\" markers (initial values, optional parameters, etc.) Return values for partially defined (in the mathematical sense) functions Return values for simple error reporting, where a None<T> can be returned Methods | Improve this Doc View Source And<TResult>(Option<TResult>) Chains two options together, discarding the result of the current option. Declaration public Option<TResult> And<TResult>(Option<TResult> option) Parameters Type Name Description Option <TResult> option The other option. Returns Type Description Option <TResult> None<T> if the option is a None<T> , otherwise option . Type Parameters Name Description TResult The type of the other option. Remarks option is eagerly evaluated. If lazy evaluation is desired, use AndThen<TResult>(Func<TOption, Option<TResult>>) . | Improve this Doc View Source AndThen<TResult>(Func<TOption, Option<TResult>>) Chains two options together if the option is Some<T> , passing the value of the option to the chained option provider optionProvider . Declaration public Option<TResult> AndThen<TResult>(Func<TOption, Option<TResult>> optionProvider) Parameters Type Name Description Func <TOption, Option <TResult>> optionProvider The function to call to get the resulting Option<TOption> . Returns Type Description Option <TResult> The result of calling optionProvider with the value of the option, if it is a Some<T> , or None<T> otherwise. Type Parameters Name Description TResult The type of the resulting value. Remarks optionProvider is lazily evaluated, and is passed the value of the option, unlike And<TResult>(Option<TResult>) . | Improve this Doc View Source AndThenAsync<TResult>(Func<TOption, Task<Option<TResult>>>) Chains two options together if the option is Some<T> , passing the value of the option to the chained option provider optionProvider . Declaration public Task<Option<TResult>> AndThenAsync<TResult>(Func<TOption, Task<Option<TResult>>> optionProvider) Parameters Type Name Description Func <TOption, Task < Option <TResult>>> optionProvider The function to call to get the resulting Option<TOption> . Returns Type Description Task < Option <TResult>> A task that represents the asynchronous conversion of the value to an Option<TOption> , which wraps the result of calling the conversion function, if the option is a Some<T> . Otherwise, a None<T> is returned. Type Parameters Name Description TResult The type of the resulting value. Remarks optionProvider is lazily evaluated, and is passed the value of the option, unlike And<TResult>(Option<TResult>) . | Improve this Doc View Source Equals(Option<TOption>) Declaration public bool Equals(Option<TOption> other) Parameters Type Name Description Option <TOption> other Returns Type Description Boolean Remarks Equality for Option<TOption> is determined as follows: | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source Expect(String) Unwraps the option, yielding the content of a Some<T> , throwing an exception with a custom message provided by msg if it is a None<T> . Declaration public TOption Expect(string msg) Parameters Type Name Description String msg The custom exception message to throw. Returns Type Description TOption The value in the option. | Improve this Doc View Source Finally(Action<TOption>) Chains a continuation without modifying the option, if the option is a Some<T> . Declaration public Option<TOption> Finally(Action<TOption> action) Parameters Type Name Description Action <TOption> action The action to call. Returns Type Description Option <TOption> The option itself. | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source IfNone(Action) Chains a continuation without modifying the option if the option is a None<T> . Declaration public Option<TOption> IfNone(Action action) Parameters Type Name Description Action action The action to call. Returns Type Description Option <TOption> The option itself. | Improve this Doc View Source Map<TResult>(Func<TOption, TResult>) Maps the value of the option to an Option<TOption> by applying the converter function. Declaration public Option<TResult> Map<TResult>(Func<TOption, TResult> converter) Parameters Type Name Description Func <TOption, TResult> converter The converter function. Returns Type Description Option <TResult> A Some<T> if the option has a value, and a None<T> otherwise. Type Parameters Name Description TResult The type of the resulting value after conversion. | Improve this Doc View Source MapAsync<TResult>(Func<TOption, Task<TResult>>) Maps the value of the option to an Option<TOption> by applying the converter function. Declaration public Task<Option<TResult>> MapAsync<TResult>(Func<TOption, Task<TResult>> converter) Parameters Type Name Description Func <TOption, Task <TResult>> converter The conversion function. Returns Type Description Task < Option <TResult>> A task that represents the asynchronous conversion of the value to an Option<TOption> , which wraps the result of the conversion function, if the option is a Some<T> . Otherwise, a None<T> is returned. Type Parameters Name Description TResult The type of the resulting value after conversion. | Improve this Doc View Source MapOr<TResult>(Func<TOption, TResult>, TResult) Maps a Some<T> to a TResult by applying the converter function, or returns def otherwise. Declaration public TResult MapOr<TResult>(Func<TOption, TResult> converter, TResult def) Parameters Type Name Description Func <TOption, TResult> converter The conversion function. TResult def The value to return if the option is a None<T> . Returns Type Description TResult The output of the conversion function if the option has a value, or def if it is a None<T> . Type Parameters Name Description TResult The type of the resulting value after conversion. Remarks def is eagerly evaluated—if you want lazy evaluation, use MapOr<TResult>(Func<TOption, TResult>, Func<TResult>) . | Improve this Doc View Source MapOr<TResult>(Func<TOption, TResult>, Func<TResult>) Maps a Some<T> to a TResult by applying the converter function or returns the result of calling provider otherwise. Declaration public TResult MapOr<TResult>(Func<TOption, TResult> converter, Func<TResult> provider) Parameters Type Name Description Func <TOption, TResult> converter The conversion function. Func <TResult> provider The function to call to provide a default value. Returns Type Description TResult The TResult output of the conversion function if the option has a value, or the result of calling provider if it is a None<T> . Type Parameters Name Description TResult The type of the resulting value after conversion. | Improve this Doc View Source Or(Option<TOption>) Chains two options together. Declaration public Option<TOption> Or(Option<TOption> other) Parameters Type Name Description Option <TOption> other The other option. Returns Type Description Option <TOption> The option if it is a Some<T> , other otherwise. Remarks other is eagerly evaluated. If lazy evaluation is desired, use OrElse(Func<Option<TOption>>) . | Improve this Doc View Source OrElse(Func<Option<TOption>>) Chains two options together, calling optionProvider to provide a result if the option is a None<T> . Declaration public Option<TOption> OrElse(Func<Option<TOption>> optionProvider) Parameters Type Name Description Func < Option <TOption>> optionProvider The function to call to get the resulting Option<TOption> . Returns Type Description Option <TOption> The option if it is a Some<T> , or the result of calling optionProvider otherwise. Remarks optionProvider is lazily evaluated. | Improve this Doc View Source OrElseAsync(Func<Task<Option<TOption>>>) Chains two options together, calling optionProvider to provide a result if the option is a None<T> . Declaration public Task<Option<TOption>> OrElseAsync(Func<Task<Option<TOption>>> optionProvider) Parameters Type Name Description Func < Task < Option <TOption>>> optionProvider The function to call to get the resulting Task<TResult> . Returns Type Description Task < Option <TOption>> A task that represents the asynchronous chaining of two options, which wraps the option if it is a Some<T> , or the result of calling optionProvider otherwise. | Improve this Doc View Source TryUnwrap(out TOption) Tries to unwrap the value out of the option if it is a Some<T> , returning true if a value was unwrapped, and false otherwise. Declaration public bool TryUnwrap(out TOption val) Parameters Type Name Description TOption val A location to store the value into. Returns Type Description Boolean true if a value was unwrapped, false otherwise. | Improve this Doc View Source Unwrap() Unwraps the value out of the option if it is a Some<T> , and throws an exception otherwise. Declaration public TOption Unwrap() Returns Type Description TOption The value in the option. | Improve this Doc View Source UnwrapOr(TOption) Unwraps the value out of the option if it is a Some<T> , or returns def otherwise. Declaration public TOption UnwrapOr(TOption def = null) Parameters Type Name Description TOption def The value to return if the option is a None<T> . Returns Type Description TOption The value in the option, or def . Remarks def is eagerly evaluated—if you want lazy evaluation, use UnwrapOr(Func<TOption>) . | Improve this Doc View Source UnwrapOr(Func<TOption>) Unwraps the value out of the option if it is a Some<T> , or returns the result of calling provider otherwise. Declaration public TOption UnwrapOr(Func<TOption> provider) Parameters Type Name Description Func <TOption> provider The function to call to provide a default value. Returns Type Description TOption The value in the option, or the result of calling provider otherwise. Operators | Improve this Doc View Source Equality(Option<TOption>, Option<TOption>) Determines whether the two objects are equal to each other. Declaration public static bool operator ==(Option<TOption> left, Option<TOption> right) Parameters Type Name Description Option <TOption> left The first object. Option <TOption> right The second object. Returns Type Description Boolean true if the objects are equal, false otherwise. | Improve this Doc View Source Implicit(TOption to Option<TOption>) Implicitly converts a TOption value to an Option<TOption> . Declaration public static implicit operator Option<TOption>(TOption value) Parameters Type Name Description TOption value The value to wrap in an option. Returns Type Description Option <TOption> A Some<T> wrapping the given value, or a None<T> if the value is null . | Improve this Doc View Source Inequality(Option<TOption>, Option<TOption>) Determines whether the two objects are not equal to each other. Declaration public static bool operator !=(Option<TOption> left, Option<TOption> right) Parameters Type Name Description Option <TOption> left The first object. Option <TOption> right The second object. Returns Type Description Boolean true if the objects are not equal, false otherwise. Implements System.IEquatable<T> Extension Methods ObjectExtensions.Yield<T>(T) ObjectExtensions.Identity<T>(T) ObjectExtensions.Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) ObjectExtensions.Also<TReceiver>(TReceiver, Action<TReceiver>) ObjectExtensions.To<TA, TB>(TA, TB) ObjectExtensions.TakeUnless<T>(T, Func<T, Boolean>) ObjectExtensions.TakeIf<T>(T, Func<T, Boolean>)"
  },
  "api/Oxide.Result-2.html": {
    "href": "api/Oxide.Result-2.html",
    "title": "Class Result<TResult, TError> | Oxide Documentation",
    "keywords": "Class Result<TResult, TError> The Result<TResult, TError> represents an operation that could return either a result or an error. Every option is either an Ok<TResult, TError> , and has a value and no error, or is a Error<TResult, TError> and has no value and an error. Inheritance Object Result Result<TResult, TError> Error <TResult, TError> Ok <TResult, TError> Implements IEquatable < Result <TResult, TError>> Inherited Members Result.IsOk Result.IsError Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Oxide Assembly : Oxide.dll Syntax public class Result<TResult, TError> : Result, IEquatable<Result<TResult, TError>> Type Parameters Name Description TResult The type of the wrapped value. TError The type of the wrapped error. Methods | Improve this Doc View Source And<TOutput>(Result<TOutput, TError>) Chains two results together, discarding the value of the current result. Declaration public Result<TOutput, TError> And<TOutput>(Result<TOutput, TError> other) Parameters Type Name Description Result <TOutput, TError> other The other result. Returns Type Description Result <TOutput, TError> other if this is an Ok<TResult, TError> , otherwise the error from this result. Type Parameters Name Description TOutput The type of the value contained in the other result. Remarks other is eagerly evaluated. If lazy evaluation is desired, use AndThen<TOutput>(Func<TResult, Result<TOutput, TError>>) . | Improve this Doc View Source AndThen<TOutput>(Func<TResult, Result<TOutput, TError>>) Chains two results together, passing the value of the current result to the chaining function op . Declaration public Result<TOutput, TError> AndThen<TOutput>(Func<TResult, Result<TOutput, TError>> op) Parameters Type Name Description Func <TResult, Result <TOutput, TError>> op The function to call to get the new Result<TResult, TError> . Returns Type Description Result <TOutput, TError> The result of calling op with the value from this result if this is an Ok<TResult, TError> , otherwise the error from this result. Type Parameters Name Description TOutput The type of the value contained in the new result. Remarks op is lazily evaluated, and is passed the value of the result, unlike And<TOutput>(Result<TOutput, TError>) . | Improve this Doc View Source AndThenAsync<TOutput>(Func<TResult, Task<Result<TOutput, TError>>>) Chains two results together, passing the value of the current result to the chaining function op . Declaration public Task<Result<TOutput, TError>> AndThenAsync<TOutput>(Func<TResult, Task<Result<TOutput, TError>>> op) Parameters Type Name Description Func <TResult, Task < Result <TOutput, TError>>> op The function to call to get the new Result<TResult, TError> . Returns Type Description Task < Result <TOutput, TError>> A task that represents the asynchronous result of calling op with the value from this result if this is an Ok<TResult, TError> , or the error from this result. Type Parameters Name Description TOutput The type of the value contained in the new result. Remarks op is lazily evaluated, and is passed the value of the result, unlike And<TOutput>(Result<TOutput, TError>) . | Improve this Doc View Source Deconstruct(out TResult, out TError) Deconstructs a Result<TResult, TError> into its constituent value and error. Declaration public void Deconstruct(out TResult val, out TError err) Parameters Type Name Description TResult val The reference to place the value into. TError err The reference to place the error into. Remarks This method is most useful with tuple deconstruction. Examples var (value, error) = someResult; | Improve this Doc View Source Equals(Result<TResult, TError>) Declaration public bool Equals(Result<TResult, TError> other) Parameters Type Name Description Result <TResult, TError> other Returns Type Description Boolean Remarks Equality for Result<TResult, TError> is determined as follows: | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source Err() Converts self into an Option<TOption> , consuming self, and discarding the value, if any. Declaration public Option<TError> Err() Returns Type Description Option <TError> A Some<T> wrapping the error from this result, or a None<T> . | Improve this Doc View Source Expect(String) Unwraps a result, yielding the content of an Ok<TResult, TError> . Declaration public TResult Expect(string msg) Parameters Type Name Description String msg Returns Type Description TResult The value from an Ok<TResult, TError> . Remarks The exception thrown will have msg as its message. If the error value is an exception, it will be included as the inner exception, otherwise it will be stringified into the exception message. Exceptions Type Condition Exception If TError is not an exception and this is an Error<TResult, TError> . | Improve this Doc View Source ExpectError(String) Unwraps an error, yielding the error of an Error<TResult, TError> . Declaration public TError ExpectError(string msg) Parameters Type Name Description String msg A message to throw as an exception if this is not an Error<TResult, TError> . Returns Type Description TError The error value. Exceptions Type Condition Exception If this is not an Error<TResult, TError> . | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source IfError(Action<TError>) Applies op to a contained Error<TResult, TError> , and returns the unmodified Result<TResult, TError> instance. Declaration public Result<TResult, TError> IfError(Action<TError> op) Parameters Type Name Description Action <TError> op The operation to apply to the error value. Returns Type Description Result <TResult, TError> This instance. | Improve this Doc View Source IfOk(Action<TResult>) Applies op to a contained Ok<TResult, TError> , and returns the unmodified Result<TResult, TError> instance. Declaration public Result<TResult, TError> IfOk(Action<TResult> op) Parameters Type Name Description Action <TResult> op The operation to apply to the contained value. Returns Type Description Result <TResult, TError> This instance. | Improve this Doc View Source Map<TOutput>(Func<TResult, TOutput>) Maps a Result<TResult, TError> to Result<TResult, TError> by applying f to a contained Ok<TResult, TError> value, leaving an Error<TResult, TError> untouched. Declaration public Result<TOutput, TError> Map<TOutput>(Func<TResult, TOutput> f) Parameters Type Name Description Func <TResult, TOutput> f The function to call on the wrapped value. Returns Type Description Result <TOutput, TError> The result of applying f to the value, or the original error. Type Parameters Name Description TOutput The type of the output of f . Remarks This function can be used to compose the results of two functions. | Improve this Doc View Source MapAsync<TOutput>(Func<TResult, Task<TOutput>>) Maps a Result<TResult, TError> to Result<TResult, TError> by applying f to a contained Ok<TResult, TError> value, leaving an Error<TResult, TError> untouched. Declaration public Task<Result<TOutput, TError>> MapAsync<TOutput>(Func<TResult, Task<TOutput>> f) Parameters Type Name Description Func <TResult, Task <TOutput>> f The function to call on the wrapped value. Returns Type Description Task < Result <TOutput, TError>> A task that represents the asynchronous result of applying f to the value, or the original error. Type Parameters Name Description TOutput The type of the output of f . Remarks This function can be used to compose the results of two functions. | Improve this Doc View Source MapErr<TErrorOutput>(Func<TError, TErrorOutput>) Maps a Result<TResult, TError> to Result<TResult, TError> by applying f to a contained Error<TResult, TError> value, leaving an Ok<TResult, TError> untouched. Declaration public Result<TResult, TErrorOutput> MapErr<TErrorOutput>(Func<TError, TErrorOutput> f) Parameters Type Name Description Func <TError, TErrorOutput> f The function to call on the wrapped value. Returns Type Description Result <TResult, TErrorOutput> The result of applying f to the error, or the original value. Type Parameters Name Description TErrorOutput The type of the error output of f . | Improve this Doc View Source MapErrAsync<TErrorOutput>(Func<TError, Task<TErrorOutput>>) Maps a Result<TResult, TError> to Result<TResult, TError> by applying op to a contained Error<TResult, TError> value, leaving an Ok<TResult, TError> untouched. Declaration public Task<Result<TResult, TErrorOutput>> MapErrAsync<TErrorOutput>(Func<TError, Task<TErrorOutput>> op) Parameters Type Name Description Func <TError, Task <TErrorOutput>> op The function to call on the wrapped value. Returns Type Description Task < Result <TResult, TErrorOutput>> A task that represents the asynchronous result of applying op to the error, or the original value. Type Parameters Name Description TErrorOutput The type of the error output of op . | Improve this Doc View Source Ok() Converts self into an Option<TOption> , consuming self, and discarding the error, if any. Declaration public Option<TResult> Ok() Returns Type Description Option <TResult> A Some<T> wrapping the value of this result, or a None<T> . | Improve this Doc View Source Or<TErrorOutput>(Result<TResult, TErrorOutput>) Chains two results together. Declaration public Result<TResult, TErrorOutput> Or<TErrorOutput>(Result<TResult, TErrorOutput> res) Parameters Type Name Description Result <TResult, TErrorOutput> res The other result. Returns Type Description Result <TResult, TErrorOutput> res if this is an Error<TResult, TError> , or the value from this result otherwise. Type Parameters Name Description TErrorOutput The type of the error value from res . Remarks res is eagerly evaluated. If lazy evaluation is desired, use OrElse<TErrorOutput>(Func<TError, Result<TResult, TErrorOutput>>) . | Improve this Doc View Source OrElse<TErrorOutput>(Func<TError, Result<TResult, TErrorOutput>>) Chains two results together, calling op to provide a result if the option is a Error<TResult, TError> . Declaration public Result<TResult, TErrorOutput> OrElse<TErrorOutput>(Func<TError, Result<TResult, TErrorOutput>> op) Parameters Type Name Description Func <TError, Result <TResult, TErrorOutput>> op The function to call to get the new Result<TResult, TError> . Returns Type Description Result <TResult, TErrorOutput> The result of calling op with the error value from this result if this is an Error<TResult, TError> , or the value from this result otherwise. Type Parameters Name Description TErrorOutput The type of the error value from the result of calling op . Remarks op is lazily evaluated, and is passed the error value from this result. If eager evaluation is desired, use Or<TErrorOutput>(Result<TResult, TErrorOutput>) . | Improve this Doc View Source OrElseAsync<TErrorOutput>(Func<TError, Task<Result<TResult, TErrorOutput>>>) Chains two results together, calling op to provide a result if the option is a Error<TResult, TError> . Declaration public Task<Result<TResult, TErrorOutput>> OrElseAsync<TErrorOutput>(Func<TError, Task<Result<TResult, TErrorOutput>>> op) Parameters Type Name Description Func <TError, Task < Result <TResult, TErrorOutput>>> op The function to call to get the new Result<TResult, TError> . Returns Type Description Task < Result <TResult, TErrorOutput>> A task that represents the asynchronous result of calling op with the error value from this result if this is an Error<TResult, TError> , or the value from this result otherwise. Type Parameters Name Description TErrorOutput The type of the error value from the result of calling op . Remarks op is lazily evaluated, and is passed the error value from this result. If eager evaluation is desired, use Or<TErrorOutput>(Result<TResult, TErrorOutput>) . | Improve this Doc View Source TryUnwrap(out TResult) Tries to unwrap the result of an Ok<TResult, TError> into val , returning true if a value was unwrapped, and false otherwise. Declaration public bool TryUnwrap(out TResult val) Parameters Type Name Description TResult val A location to unwrap the value into. Returns Type Description Boolean true if a value was unwrapped, false otherwise. | Improve this Doc View Source TryUnwrap(out TResult, out TError) Tries to unwrap the result of an Ok<TResult, TError> into val for the value and err for the error, returning true if a value was unwrapped, and false otherwise. Declaration public bool TryUnwrap(out TResult val, out TError err) Parameters Type Name Description TResult val A location to unwrap the value into. TError err A location to unwrap the error into. Returns Type Description Boolean true if a value was unwrapped, false otherwise. | Improve this Doc View Source TryUnwrapError(out TError) Tries to unwrap the error of an Error<TResult, TError> into err , returning true if an error was unwrapped, and false otherwise. Declaration public bool TryUnwrapError(out TError err) Parameters Type Name Description TError err A location to unwrap the error into. Returns Type Description Boolean true if an error was unwrapped, false otherwise. | Improve this Doc View Source Unwrap() Unwraps a result, yielding the content of an Ok<TResult, TError> . Declaration public TResult Unwrap() Returns Type Description TResult The value from an Ok<TResult, TError> . Exceptions Type Condition Exception If TError is not an exception and this is an Error<TResult, TError> . | Improve this Doc View Source UnwrapError() Unwraps an error, yielding the content of an Error<TResult, TError> . Declaration public TError UnwrapError() Returns Type Description TError The error from an Error<TResult, TError> . Exceptions Type Condition Exception If this is not an error value. | Improve this Doc View Source UnwrapOr(TResult) Unwraps the value from this result, returning a fallback if there is no value. Declaration public TResult UnwrapOr(TResult other = null) Parameters Type Name Description TResult other The fallback value to return if this result is an Error<TResult, TError> . Returns Type Description TResult The value from this result if it is a Ok<TResult, TError> , or other otherwise. Remarks other is eagerly evaluated. If lazy evaluation is desired, use UnwrapOrElse(Func<TError, TResult>) . | Improve this Doc View Source UnwrapOrElse(Func<TError, TResult>) Unwraps the value from this result, or the result of calling op if there is no value. Declaration public TResult UnwrapOrElse(Func<TError, TResult> op) Parameters Type Name Description Func <TError, TResult> op The function to call to get a fallback value. Returns Type Description TResult The value from this result if it is a Ok<TResult, TError> , or the result of calling op otherwise. Remarks op is lazily evaluated, and is passed the error value from this result. If eager evaluation is desired, use UnwrapOr(TResult) . | Improve this Doc View Source UnwrapOrElseAsync(Func<TError, Task<TResult>>) Unwraps the value from this result, or the result of calling op if there is no value. Declaration public Task<TResult> UnwrapOrElseAsync(Func<TError, Task<TResult>> op) Parameters Type Name Description Func <TError, Task <TResult>> op The function to call to get a fallback value. Returns Type Description Task <TResult> A task that represents the value from this result if it is a Ok<TResult, TError> , or the result of calling op otherwise. Remarks op is lazily evaluated, and is passed the error value from this result. If eager evaluation is desired, use UnwrapOr(TResult) . Operators | Improve this Doc View Source Equality(Result<TResult, TError>, Result<TResult, TError>) Determines whether the two objects are equal to each other. Declaration public static bool operator ==(Result<TResult, TError> left, Result<TResult, TError> right) Parameters Type Name Description Result <TResult, TError> left The first object. Result <TResult, TError> right The second object. Returns Type Description Boolean true if the objects are equal, false otherwise. | Improve this Doc View Source Implicit(TResult to Result<TResult, TError>) Implicitly converts a TResult value to a Result<TResult, TError> with a value. Declaration public static implicit operator Result<TResult, TError>(TResult value) Parameters Type Name Description TResult value The value to wrap in a result. Returns Type Description Result <TResult, TError> A Ok<TResult, TError> wrapping the given value. Exceptions Type Condition NullReferenceException If the passed value is null. | Improve this Doc View Source Implicit(TError to Result<TResult, TError>) Implicitly converts a TError value to a Result<TResult, TError> with an error. Declaration public static implicit operator Result<TResult, TError>(TError error) Parameters Type Name Description TError error The error to wrap in a result. Returns Type Description Result <TResult, TError> A Error<TResult, TError> wrapping the given error. Exceptions Type Condition NullReferenceException If the passed error is null. | Improve this Doc View Source Inequality(Result<TResult, TError>, Result<TResult, TError>) Determines whether the two objects are not equal to each other. Declaration public static bool operator !=(Result<TResult, TError> left, Result<TResult, TError> right) Parameters Type Name Description Result <TResult, TError> left The first object. Result <TResult, TError> right The second object. Returns Type Description Boolean true if the objects are not equal, false otherwise. Implements System.IEquatable<T> Extension Methods ObjectExtensions.Yield<T>(T) ObjectExtensions.Identity<T>(T) ObjectExtensions.Let<TReceiver, TResult>(TReceiver, Func<TReceiver, TResult>) ObjectExtensions.Also<TReceiver>(TReceiver, Action<TReceiver>) ObjectExtensions.To<TA, TB>(TA, TB) ObjectExtensions.TakeUnless<T>(T, Func<T, Boolean>) ObjectExtensions.TakeIf<T>(T, Func<T, Boolean>)"
  }
}